


ARM Macro Assembler    Page 1 


    1 00000000         
    2 00000000         
    3 00000000                 AREA             mycode,CODE,READONLY
    4 00000000                 ENTRY
    5 00000000                 EXPORT           __main
    6 00000000         
    7 00000000         __main
    8 00000000         
    9 00000000 F000 F852       BL               prog_set_7
   10 00000004         
   11 00000004         
   12 00000004 E7FE    stop    B                stop
   13 00000006         
   14 00000006         
   15 00000006         prog_set_1
   16 00000006         
   17 00000006 F04F 010A       MOV              R1,#10      ;R1 = 10
   18 0000000A F04F 020C       MOV              R2,#12      ;R2 = 12
   19 0000000E 428A            CMP              R2,R1       ;compare 12 with 10
                                                            , Z = 0 because the
                                                            y are not equal
   20 00000010 BF08 2414       MOVEQ            R4,#20      ;this line is not e
                                                            xecuted because ; t
                                                            he condition EQ is 
                                                            not met
   21 00000014         
   22 00000014 2900            CMP              R1,#0       ;compare R1 with 0
   23 00000016 BF1C 310A       ADDNE            R1,R1,#10   ;this line is execu
                                                            ted if Z = 0
   24 0000001A         
   25 0000001A F111 010A       ADDNES           R1,R1,#10
   26 0000001E 4770            BX               LR
   27 00000020         
   28 00000020         
   29 00000020         ;without conditional execution 
   30 00000020         
   31 00000020         prog_set_2
   32 00000020         
   33 00000020 F04F 0000       MOV              R0,#0
   34 00000024 F04F 0100       MOV              R1,#0
   35 00000028 4A27            LDR              R2,=0x9999999
   36 0000002A F04F 030A       MOV              R3,#10
   37 0000002E         
   38 0000002E 1880    L1      ADDS             R0,R0,R2    ;R0 = R0 + R2 and u
                                                            pdate the flags
   39 00000030 D301            BCC              NEXT        ;if C = 0, go to ne
                                                            xt number
   40 00000032 F101 0101       ADD              R1,R1,#1    ;if C = 1, incremen
                                                            t the upper word
   41 00000036 1E5B    NEXT    SUBS             R3,R3,#1    ;R3 = R3 - 1 and up
                                                            date the flags
   42 00000038 D1F9            BNE              L1          ;next round if z = 
                                                            0
   43 0000003A         
   44 0000003A 4770            BX               LR
   45 0000003C         
   46 0000003C         
   47 0000003C         ; with conditional execution
   48 0000003C         prog_set_3



ARM Macro Assembler    Page 2 


   49 0000003C         
   50 0000003C F04F 0000       MOV              R0,#0
   51 00000040 F04F 0100       MOV              R1,#0
   52 00000044 4A20            LDR              R2,=0x9999999
   53 00000046 F04F 030A       MOV              R3,#10
   54 0000004A         
   55 0000004A 1880    L2      ADDS             R0,R0,R2    ;;R0 = R0 + R2 and 
                                                            update the flags
   56 0000004C BF28 1C49       ADDCS            R1,R1,#1    ;if C set (C = 1),i
                                                            ncrement the upper 
                                                            word
   57 00000050 1E5B            SUBS             R3,R3,#1    ;R3 = R3 - 1 and up
                                                            date the flags
   58 00000052 D1FA            BNE              L2          ;next round if z = 
                                                            0
   59 00000054         
   60 00000054 4770            BX               LR
   61 00000056         
   62 00000056         
   63 00000056         ;find max number using conditional executions
   64 00000056         prog_set_4
   65 00000056 F04F 0005       MOV              R0,#5       ;count
   66 0000005A F04F 0100       MOV              R1,#0       ;max
   67 0000005E 4A1B            LDR              R2,=MyData  ;pointer
   68 00000060 6813    Again   LDR              R3,[R2]     ;next
   69 00000062         
   70 00000062 4299            CMP              R1,R3       ;c=1,Z=0
   71 00000064 BF38 4619       MOVLO            R1,R3
   72 00000068 F102 0204       ADD              R2,R2,#4
   73 0000006C 1E40            SUBS             R0,R0,#1
   74 0000006E D1F7            BNE              Again
   75 00000070 4770            BX               LR
   76 00000072         
   77 00000072         
   78 00000072         ;playing with signed number
   79 00000072         prog_set_5
   80 00000072 4817            LDR              R0,=SIGN_DAT
   81 00000074 F04F 0309       MOV              R3,#9
   82 00000078 F04F 0200       MOV              R2,#0
   83 0000007C F990 1000 
                       LOOP    LDRSB            R1, [R0]
   84 00000080 440A            ADD              R2,R2,R1
   85 00000082 F100 0001       ADD              R0,R0,#1
   86 00000086 1E5B            SUBS             R3,R3,#1
   87 00000088 D1F8            BNE              LOOP
   88 0000008A 4812            LDR              R0,=SUM
   89 0000008C 6002            STR              R2,[R0]
   90 0000008E 4770            BX               LR
   91 00000090         
   92 00000090         ;use TST instructions
   93 00000090         prog_set_6
   94 00000090         
   95 00000090 F04F 0064       MOV              R0,#100
   96 00000094 4910            LDR              R1,=myPort
   97 00000096 780A    OVER    LDRB             R2,[R1]
   98 00000098 EA92 0F00       TEQ              R2,R0
   99 0000009C D1FB            BNE              OVER
  100 0000009E F04F 0064       MOV              R0,#100
  101 000000A2 F04F 0064       MOV              R0,#100



ARM Macro Assembler    Page 3 


  102 000000A6 4770            BX               LR
  103 000000A8         
  104 000000A8         
  105 000000A8         
  106 000000A8         
  107 000000A8         ;Assuming R5 has a positive value, 
  108 000000A8         ;write a program that finds its negative match in an arr
                       ay of data (OUR_DATA).
  109 000000A8         prog_set_7
  110 000000A8         
  111 000000A8 F04F 050D       MOV              R5,#13
  112 000000AC 490B            LDR              R1,=OUR_data+1
  113 000000AE F04F 0309       MOV              R3,#9
  114 000000B2         
  115 000000B2 F991 0000 
                       begins  LDRSB            R0,[R1]
  116 000000B6 42A8            CMP              R0,R5
  117 000000B8 D004            BEQ              Found       ;if z=1
  118 000000BA         
  119 000000BA F101 0101       ADD              R1,R1,#1
  120 000000BE 1E5B            SUBS             R3,R3,#1
  121 000000C0 D1F7            BNE              begins
  122 000000C2         
  123 000000C2 E7FE    Notfound
                               B                Notfound
  124 000000C4 E7FE    Found   B                Found
  125 000000C6         
  126 000000C6         
  127 000000C6         
  128 000000C6 00 00 09999999 
              00000000 
              00000000 
              00000000 
              00000000 
              00000001         AREA             myData,DATA,READONLY
  129 00000000 00000055 
              00000065 
              00000025 
              00000096 
              00000026 MyData  DCD              0x55,0x65,0x25,0x96,0x26
  130 00000014 0D F6 13 
              0E EE F7 
              0C ED 10 SIGN_DAT
                               DCB              +13,-10,+19,+14,-18,-9,+12,-19,
+16
  131 0000001D 00 00 00 
              00000000 SUM     DCD              0
  132 00000024 00000064 
                       myPort  DCD              100
  133 00000028 0D F6 F4 
              0E EE F7 
              0D ED 10 OUR_data
                               DCB              +13,-10,-12,+14,-18,-9,+13,-19,
+16
  134 00000031         
  135 00000031 00 00 00        ALIGN
  136 00000034                 END
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp --apcs=int
erwork --depend=.\objects\main.d -o.\objects\main.o -I.\RTE\_Target_1 -IC:\User



ARM Macro Assembler    Page 4 


s\suraj\AppData\Local\Arm\Packs\ARM\CMSIS\5.6.0\CMSIS\Core\Include -IC:\Users\s
uraj\AppData\Local\Arm\Packs\Keil\STM32F4xx_DFP\2.14.0\Drivers\CMSIS\Device\ST\
STM32F4xx\Include --predefine="__EVAL SETA 1" --predefine="__MICROLIB SETA 1" -
-predefine="__UVISION_VERSION SETA 528" --predefine="_RTE_ SETA 1" --predefine=
"STM32F446xx SETA 1" --list=.\listings\main.lst main.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

Again 00000060

Symbol: Again
   Definitions
      At line 68 in file main.s
   Uses
      At line 74 in file main.s
Comment: Again used once
Found 000000C4

Symbol: Found
   Definitions
      At line 124 in file main.s
   Uses
      At line 117 in file main.s
      At line 124 in file main.s

L1 0000002E

Symbol: L1
   Definitions
      At line 38 in file main.s
   Uses
      At line 42 in file main.s
Comment: L1 used once
L2 0000004A

Symbol: L2
   Definitions
      At line 55 in file main.s
   Uses
      At line 58 in file main.s
Comment: L2 used once
LOOP 0000007C

Symbol: LOOP
   Definitions
      At line 83 in file main.s
   Uses
      At line 87 in file main.s
Comment: LOOP used once
NEXT 00000036

Symbol: NEXT
   Definitions
      At line 41 in file main.s
   Uses
      At line 39 in file main.s
Comment: NEXT used once
Notfound 000000C2

Symbol: Notfound
   Definitions
      At line 123 in file main.s
   Uses
      At line 123 in file main.s
Comment: Notfound used once
OVER 00000096




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Symbol: OVER
   Definitions
      At line 97 in file main.s
   Uses
      At line 99 in file main.s
Comment: OVER used once
__main 00000000

Symbol: __main
   Definitions
      At line 7 in file main.s
   Uses
      At line 5 in file main.s
Comment: __main used once
begins 000000B2

Symbol: begins
   Definitions
      At line 115 in file main.s
   Uses
      At line 121 in file main.s
Comment: begins used once
mycode 00000000

Symbol: mycode
   Definitions
      At line 3 in file main.s
   Uses
      None
Comment: mycode unused
prog_set_1 00000006

Symbol: prog_set_1
   Definitions
      At line 15 in file main.s
   Uses
      None
Comment: prog_set_1 unused
prog_set_2 00000020

Symbol: prog_set_2
   Definitions
      At line 31 in file main.s
   Uses
      None
Comment: prog_set_2 unused
prog_set_3 0000003C

Symbol: prog_set_3
   Definitions
      At line 48 in file main.s
   Uses
      None
Comment: prog_set_3 unused
prog_set_4 00000056

Symbol: prog_set_4
   Definitions
      At line 64 in file main.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

   Uses
      None
Comment: prog_set_4 unused
prog_set_5 00000072

Symbol: prog_set_5
   Definitions
      At line 79 in file main.s
   Uses
      None
Comment: prog_set_5 unused
prog_set_6 00000090

Symbol: prog_set_6
   Definitions
      At line 93 in file main.s
   Uses
      None
Comment: prog_set_6 unused
prog_set_7 000000A8

Symbol: prog_set_7
   Definitions
      At line 109 in file main.s
   Uses
      At line 9 in file main.s
Comment: prog_set_7 used once
stop 00000004

Symbol: stop
   Definitions
      At line 12 in file main.s
   Uses
      At line 12 in file main.s
Comment: stop used once
19 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

MyData 00000000

Symbol: MyData
   Definitions
      At line 129 in file main.s
   Uses
      At line 67 in file main.s
Comment: MyData used once
OUR_data 00000028

Symbol: OUR_data
   Definitions
      At line 133 in file main.s
   Uses
      At line 112 in file main.s
Comment: OUR_data used once
SIGN_DAT 00000014

Symbol: SIGN_DAT
   Definitions
      At line 130 in file main.s
   Uses
      At line 80 in file main.s
Comment: SIGN_DAT used once
SUM 00000020

Symbol: SUM
   Definitions
      At line 131 in file main.s
   Uses
      At line 88 in file main.s
Comment: SUM used once
myData 00000000

Symbol: myData
   Definitions
      At line 128 in file main.s
   Uses
      None
Comment: myData unused
myPort 00000024

Symbol: myPort
   Definitions
      At line 132 in file main.s
   Uses
      At line 96 in file main.s
Comment: myPort used once
6 symbols
363 symbols in table
